import { DeepPartial } from 'ts-essentials';
import { Mock } from 'vitest';

type MatcherFn<T> = (actualValue: T) => boolean;
declare class Matcher<T> {
    readonly asymmetricMatch: MatcherFn<T>;
    private readonly description;
    $$typeof: symbol;
    inverse?: boolean;
    constructor(asymmetricMatch: MatcherFn<T>, description: string);
    toString(): string;
    toAsymmetricMatcher(): string;
    getExpectedType(): string;
}
declare class CaptorMatcher<T> {
    $$typeof: symbol;
    readonly asymmetricMatch: MatcherFn<T>;
    readonly value: T;
    readonly values: T[];
    constructor();
    getExpectedType(): string;
    toString(): string;
    toAsymmetricMatcher(): string;
}
interface MatcherCreator<T, E = T> {
    (expectedValue?: E): Matcher<T>;
}
type MatchersOrLiterals<Y extends any[]> = {
    [K in keyof Y]: Matcher<Y[K]> | Y[K];
};
declare const any: MatcherCreator<any>;
declare const anyBoolean: MatcherCreator<boolean>;
declare const anyNumber: MatcherCreator<number>;
declare const anyString: MatcherCreator<string>;
declare const anyFunction: MatcherCreator<Function>;
declare const anySymbol: MatcherCreator<symbol>;
declare const anyObject: MatcherCreator<any>;
declare const anyArray: MatcherCreator<any[]>;
declare const anyMap: MatcherCreator<Map<any, any>>;
declare const anySet: MatcherCreator<Set<any>>;
declare const isA: MatcherCreator<any>;
declare const arrayIncludes: MatcherCreator<any[], any>;
declare const setHas: MatcherCreator<Set<any>, any>;
declare const mapHas: MatcherCreator<Map<any, any>, any>;
declare const objectContainsKey: MatcherCreator<any, string>;
declare const objectContainsValue: MatcherCreator<any>;
declare const notNull: MatcherCreator<any>;
declare const notUndefined: MatcherCreator<any>;
declare const notEmpty: MatcherCreator<any>;
declare const captor: <T extends unknown = any>() => CaptorMatcher<T>;
declare const matches: <T extends unknown = any>(matcher: MatcherFn<T>) => Matcher<T>;

type ProxiedProperty = string | number | symbol;
interface GlobalConfig {
    ignoreProps?: ProxiedProperty[];
}
declare const VitestMockExtended: {
    DEFAULT_CONFIG: GlobalConfig;
    configure: (config: GlobalConfig) => void;
    resetConfig: () => void;
};
interface CalledWithMock<T, Y extends any[]> extends Mock<Y, T> {
    calledWith: (...args: Y | MatchersOrLiterals<Y>) => Mock<Y, T>;
}
type _MockProxy<T> = {
    [K in keyof T]: T[K] extends (...args: infer A) => infer B ? T[K] & CalledWithMock<B, A> : T[K];
};
type MockProxy<T> = _MockProxy<T> & T;
type _DeepMockProxy<T> = {
    [K in keyof T]: T[K] extends (...args: infer A) => infer B ? T[K] & CalledWithMock<B, A> : T[K] & _DeepMockProxy<T[K]>;
};
type DeepMockProxy<T> = _DeepMockProxy<T> & T;
type _DeepMockProxyWithFuncPropSupport<T> = {
    [K in keyof T]: T[K] extends (...args: infer A) => infer B ? CalledWithMock<B, A> & DeepMockProxy<T[K]> : DeepMockProxy<T[K]>;
};
type DeepMockProxyWithFuncPropSupport<T> = _DeepMockProxyWithFuncPropSupport<T> & T;
interface MockOpts {
    deep?: boolean;
    useActualToJSON?: boolean;
    fallbackMockImplementation?: (...args: any[]) => any;
}
declare const mockClear: (mock: MockProxy<any>) => any;
declare const mockReset: (mock: MockProxy<any>) => any;
declare function mockDeep<T>(opts: {
    funcPropSupport?: true;
    fallbackMockImplementation?: MockOpts['fallbackMockImplementation'];
}, mockImplementation?: DeepPartial<T>): DeepMockProxyWithFuncPropSupport<T>;
declare function mockDeep<T>(mockImplementation?: DeepPartial<T>): DeepMockProxy<T>;
declare const mock: <T, MockedReturn extends _MockProxy<T> & T = _MockProxy<T> & T>(mockImplementation?: DeepPartial<T>, opts?: MockOpts) => MockedReturn;
declare const mockFn: <T, A extends any[] = T extends (...args: infer AReal) => any ? AReal : any[], R = T extends (...args: any) => infer RReal ? RReal : any>() => CalledWithMock<R, A> & T;
declare const stub: <T extends object>() => T;

type FallbackImplementation<Y extends any[], T> = (...args: Y) => T;
type CalledWithFnArgs<Y extends any[], T> = {
    fallbackMockImplementation?: FallbackImplementation<Y, T>;
};
declare const calledWithFn: <T, Y extends any[]>({ fallbackMockImplementation }?: CalledWithFnArgs<Y, T>) => CalledWithMock<T, Y>;

export { type CalledWithMock, CaptorMatcher, type DeepMockProxy, type GlobalConfig, Matcher, type MatcherCreator, type MatcherFn, type MatchersOrLiterals, type MockOpts, type MockProxy, VitestMockExtended, any, anyArray, anyBoolean, anyFunction, anyMap, anyNumber, anyObject, anySet, anyString, anySymbol, arrayIncludes, calledWithFn, captor, isA, mapHas, matches, mock, mockClear, mockDeep, mockFn, mockReset, notEmpty, notNull, notUndefined, objectContainsKey, objectContainsValue, setHas, stub };
//# sourceMappingURL=index.d.ts.map
